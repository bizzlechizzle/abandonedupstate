---
import "@pagefind/default-ui/css/ui.css";
import { getCollection } from "astro:content";
import Main from "@/layouts/Main.astro";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import getUniqueTags from "@/utils/getUniqueTags";
import getUniqueStates from "@/utils/getUniqueStates";
import getUniqueCategories from "@/utils/getUniqueCategories";
import { SITE } from "@/config";

const backUrl = SITE.showBackButton ? `${Astro.url.pathname}` : "/";

const posts = await getCollection("blog");
const tags = getUniqueTags(posts);

const stateSummaries = getUniqueStates(posts);
const states = stateSummaries.map(({ label, slug }) => ({
  label,
  slug,
  href: `/states/${slug}/`,
}));

const categorySummaries = getUniqueCategories(posts);
const categories = categorySummaries.map(({ label, slug }) => ({
  label,
  slug,
  href: `/categories/${slug}/`,
}));
---

<Layout title={`Search | ${SITE.title}`}>
  <Header />
  <Main pageTitle="Search">
    <div
      id="pagefind-search"
      class="search-module"
      transition:persist
      data-backurl={backUrl}
    ></div>

    {states.length > 0 && (
      <section class="search-section" aria-label="Browse by state">
        <h2 class="search-section__heading">Browse by state</h2>
        <ul class="search-section__list">
          {states.map(state => (
            <Tag tag={state.slug} tagName={state.label} size="lg" href={state.href} />
          ))}
        </ul>
      </section>
    )}

    {categories.length > 0 && (
      <section class="search-section" aria-label="Browse by category">
        <h2 class="search-section__heading">Browse by category</h2>
        <ul class="search-section__list">
          {categories.map(category => (
            <Tag
              tag={category.slug}
              tagName={category.label}
              size="lg"
              href={category.href}
            />
          ))}
        </ul>
      </section>
    )}

    {tags.length > 0 && (
      <section class="search-section" aria-label="Browse by tag">
        <h2 class="search-section__heading">Browse by tag</h2>
        <ul class="search-section__list">
          {tags.map(({ tag, tagName }) => (
            <Tag tag={tag} tagName={tagName} size="lg" />
          ))}
        </ul>
      </section>
    )}
  </Main>
  <Footer />
</Layout>

<script>
  function initSearch() {
    const pageFindSearch: HTMLElement | null =
      document.querySelector("#pagefind-search");

    if (!pageFindSearch) return;

    const params = new URLSearchParams(window.location.search);

    const onIdle = window.requestIdleCallback || (cb => setTimeout(cb, 1));

    onIdle(async () => {
      // @ts-expect-error â€” Missing types for @pagefind/default-ui package.
      const { PagefindUI } = await import("@pagefind/default-ui");

      const updateQueryParam = (term: string) => {
        if (term.trim() !== "") {
          params.set("q", term);
          history.replaceState(history.state, "", "?" + params.toString());
        } else {
          params.delete("q");
          history.replaceState(history.state, "", window.location.pathname);
        }
      };

      // Init pagefind ui
      const search = new PagefindUI({
        element: "#pagefind-search",
        showSubResults: true,
        showImages: false,
        processTerm: function (term: string) {
          updateQueryParam(term);

          const backUrl = pageFindSearch?.dataset?.backurl;
          sessionStorage.setItem("backUrl", backUrl + "?" + params.toString());

          return term;
        },
      });

      // Expose for debugging / programmatic calls
      (window as typeof window & { __pagefindSearch?: unknown }).__pagefindSearch =
        search;

      // If search param exists (eg: search?q=astro), trigger search
      const query = params.get("q");
      if (query) {
        search.triggerSearch(query);
      }

      // Reset search param if search input is cleared
      const searchInput = document.querySelector<HTMLInputElement>(
        ".pagefind-ui__search-input"
      );
      const clearButton = document.querySelector<HTMLButtonElement>(
        ".pagefind-ui__search-clear"
      );
      searchInput?.addEventListener("input", resetSearchParam);
      clearButton?.addEventListener("click", resetSearchParam);

      function resetSearchParam(e: Event) {
        if (e.target instanceof HTMLInputElement) {
          if (e.target.value.trim() === "") {
            updateQueryParam("");
          }
          return;
        }

        if (e.target instanceof HTMLButtonElement) {
          updateQueryParam("");
        }
      }
    });
  }

  document.addEventListener("astro:after-swap", () => {
    const pagefindSearch = document.querySelector("#pagefind-search");

    // if pagefind search form already exists, don't initialize search component
    if (pagefindSearch && pagefindSearch.querySelector("form")) return;

    initSearch();
  });
  initSearch();
</script>

<style is:global>
  #main-content > h1 {
    font-family: var(--font-heading);
    text-transform: uppercase;
    letter-spacing: 0.12em;
    margin-bottom: 2.5rem;
  }

  .search-module {
    display: block;
    margin-bottom: 3rem;
  }

  .search-section {
    margin-bottom: 2.5rem;
  }

  .search-section__heading {
    font-family: var(--font-heading);
    font-size: clamp(1.25rem, 1.1rem + 1.2vw, 1.6rem);
    text-transform: uppercase;
    letter-spacing: 0.12em;
    margin-bottom: 1rem;
  }

  .search-section__list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem 1rem;
    padding: 0;
    margin: 0;
    list-style: none;
  }

  #pagefind-search {
    --pagefind-ui-font: var(--font-body);
    --pagefind-ui-text: var(--foreground);
    --pagefind-ui-background: var(--background);
    --pagefind-ui-border: var(--border);
    --pagefind-ui-primary: var(--accent);
    --pagefind-ui-tag: var(--background);
    --pagefind-ui-border-radius: 0.375rem;
    --pagefind-ui-border-width: 1px;
    --pagefind-ui-image-border-radius: 8px;
    --pagefind-ui-image-box-ratio: 3 / 2;

    form::before {
      background-color: var(--foreground);
    }

    input {
      font-weight: 400;
      border: 1px solid var(--border);
    }

    input:focus-visible {
      outline: 1px solid var(--accent);
    }

    .pagefind-ui__result-title a {
      color: var(--accent);
      outline-offset: 1px;
      outline-color: var(--accent);
    }

    .pagefind-ui__result-title a:focus-visible,
    .pagefind-ui__search-clear:focus-visible {
      text-decoration-line: none;
      outline-width: 2px;
      outline-style: dashed;
    }

    .pagefind-ui__result:last-of-type {
      border-bottom: 0;
    }

    .pagefind-ui__result-nested .pagefind-ui__result-link:before {
      font-family: system-ui;
    }
  }
</style>
