---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

export interface Props {
  videoUrl: string;
  title: string;
  thumbnail: ImageMetadata;
  aspectRatio?: string; // format: "16:9"
  allow?: string;
}

const {
  videoUrl,
  title,
  thumbnail,
  aspectRatio = "16:9",
  allow = "autoplay; fullscreen; picture-in-picture; clipboard-write; encrypted-media; web-share",
} = Astro.props;

const ratioParts = aspectRatio.split(":").map(Number);
const [ratioWidth, ratioHeight] =
  ratioParts.length === 2 && ratioParts.every(part => Number.isFinite(part) && part > 0)
    ? (ratioParts as [number, number])
    : ([16, 9] as [number, number]);

const paddingTop = (ratioHeight / ratioWidth) * 100;

const hasQuery = videoUrl.includes("?");
const autoplayUrl = `${videoUrl}${hasQuery ? "&" : "?"}autoplay=1`;
---

<div
  class="video-embed"
  style={`--ratio-width: ${ratioWidth}; --ratio-height: ${ratioHeight}; --ratio-padding: ${paddingTop}%;`}
  data-video-embed
  data-video-src={autoplayUrl}
  data-video-title={title}
  data-video-allow={allow}
>
  <div class="video-embed__cover" data-video-cover>
    <Image
      src={thumbnail}
      alt={title}
      class="video-embed__image"
      widths={[640, 960, 1280]}
      sizes="(max-width: 768px) 100vw, 960px"
      quality={85}
      loading="lazy"
    />
    <button type="button" class="video-embed__button" data-video-trigger>
      <span class="sr-only">Play {title}</span>
      <svg
        class="video-embed__icon"
        viewBox="0 0 68 48"
        aria-hidden="true"
        preserveAspectRatio="xMidYMid meet"
      >
        <path
          d="M66.52 12.36c-.73-2.74-2.86-4.88-5.6-5.63C56.17 5.4 34 5.4 34 5.4s-22.17 0-26.92 1.33c-2.74.73-4.87 2.87-5.6 5.63C0.1 17.14 0 24 0 24s.1 6.86 1.48 11.64c.73 2.74 2.86 4.88 5.6 5.63C11.83 42.6 34 42.6 34 42.6s22.17 0 26.92-1.33c2.74-.73 4.87-2.87 5.6-5.63C67.9 30.86 68 24 68 24s-.1-6.86-1.48-11.64"
          fill="#b9975c"
        />
        <path d="M27 31.18 45 24 27 16.82Z" fill="#fffbf7" />
      </svg>
    </button>
  </div>
</div>

<style>
  .video-embed {
    position: relative;
    width: 100%;
    margin: 2rem 0;
    border-radius: 0.5rem;
    border: 1px solid var(--border);
    overflow: hidden;
    background: rgba(0, 0, 0, 0.15);
    padding-top: var(--ratio-padding, 56.25%);
    height: 0;
  }

  @supports (aspect-ratio: 1) {
    .video-embed {
      aspect-ratio: calc(var(--ratio-width, 16) / var(--ratio-height, 9));
      padding-top: 0;
      height: auto;
    }
  }

  .video-embed__cover {
    position: absolute;
    inset: 0;
    display: block;
    overflow: hidden;
  }

  .video-embed__cover picture,
  .video-embed__cover img {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    display: block;
  }

  .video-embed__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    display: block;
    transition: transform 0.4s ease;
    border: none;
    margin: 0;
  }

  .video-embed__button {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    border: none;
    background: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.3s ease;
  }

  .video-embed__icon {
    width: clamp(3.75rem, 8vw, 6.75rem);
    aspect-ratio: 68 / 48;
    transition: transform 0.3s ease;
    opacity: 0.8;
  }

  .video-embed__button:hover .video-embed__icon,
  .video-embed__button:focus-visible .video-embed__icon {
    transform: scale(1.05);
    opacity: 1;
  }

  .video-embed__button:focus-visible {
    outline: 2px dashed var(--accent);
    outline-offset: 4px;
  }

  .video-embed[data-video-loaded] .video-embed__cover {
    display: none;
  }

  .video-embed[data-video-loaded] iframe {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    border: none;
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>

<script is:inline>
  const initVideoEmbeds = () => {
    const containers = document.querySelectorAll('[data-video-embed]');

    containers.forEach(container => {
      if (container.dataset.bound === 'true') return;
      const trigger = container.querySelector('[data-video-trigger]');
      if (!trigger) return;

      const createIframe = () => {
        if (container.dataset.videoLoaded === 'true') return;

        const iframe = document.createElement('iframe');
        iframe.src = container.dataset.videoSrc || '';
        iframe.title = container.dataset.videoTitle || 'Embedded video';
        iframe.setAttribute('allow', container.dataset.videoAllow || 'autoplay; fullscreen; picture-in-picture');
        iframe.setAttribute('allowfullscreen', 'true');
        iframe.setAttribute('loading', 'lazy');
        iframe.style.position = 'absolute';
        iframe.style.top = '0';
        iframe.style.left = '0';
        iframe.style.width = '100%';
        iframe.style.height = '100%';

        container.appendChild(iframe);
        container.dataset.videoLoaded = 'true';
      };

      trigger.addEventListener('click', () => {
        createIframe();
      });

      container.dataset.bound = 'true';
    });
  };

  document.addEventListener('astro:page-load', initVideoEmbeds);
  initVideoEmbeds();
</script>
