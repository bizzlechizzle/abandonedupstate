---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

type GallerySource = string | ImageMetadata;

export interface GalleryImageDefinition {
  src: GallerySource;
  caption?: string;
  seoCaption?: string;
  sourceurl?: string;
  source?: string;
  historical?: boolean;
  position?: string;
}

export interface Props {
  galleryId: string;
  images: GalleryImageDefinition[];
  class?: string;
  widths?: number[];
  sizes?: string;
  quality?: number;
  aspectRatio?: string;
  noAnchor?: boolean;
}

const imageModules = import.meta.glob(
  "../assets/images/**/*.{jpg,jpeg,png,webp,avif,gif}",
  {
    eager: true,
    import: "default",
  }
);

const normalizePath = (src: string) => {
  if (src.startsWith("@/")) {
    return src.replace(/^@\//, "../");
  }

  if (src.startsWith("/src/")) {
    return src.replace(/^\/src\//, "../");
  }

  return src;
};

const resolveMetadata = (src: GallerySource): ImageMetadata => {
  if (typeof src !== "string") {
    return src;
  }

  const normalized = normalizePath(src);
  const metadata = imageModules[normalized];

  if (!metadata) {
    throw new Error(
      `GalleryLightbox: image "${src}" was not found. Ensure the path points to a file under src/assets/images.`
    );
  }

  return metadata as ImageMetadata;
};

const {
  galleryId,
  images,
  class: className = "gallery gallery--two",
  widths = [300, 600, 900],
  sizes = "(max-width: 480px) 100vw, (max-width: 768px) 50vw, 33vw",
  quality = 80,
  aspectRatio,
  noAnchor = false,
} = Astro.props as Props;

const resolvedImages = images.map(image => {
  const metadata = resolveMetadata(image.src);
  const naturalAspect =
    typeof metadata.width === "number" && typeof metadata.height === "number"
      ? `${metadata.width} / ${metadata.height}`
      : undefined;
  const resolvedAspect = aspectRatio ?? naturalAspect ?? "16 / 9";

  return {
    caption: image.caption,
    seoCaption: image.seoCaption,
    sourceurl: image.sourceurl,
    source: image.source,
    position: image.position,
    metadata,
    resolvedAspect,
  };
});
---
<div class={className} data-no-anchor={noAnchor ? "true" : undefined}>
  {resolvedImages.map(({ metadata, caption, seoCaption, resolvedAspect, sourceurl, source, position }, index) => {
    const finalCaption = caption ?? "";
    const finalSeoCaption = seoCaption || finalCaption || `Gallery image ${index + 1}`;
    const Tag = (noAnchor ? "div" : "a") as "div" | "a";
    const baseClass = "gallery-item" + (noAnchor ? "" : " glightbox");
    // Build GLightbox description string (escape HTML entities to prevent breaking attributes)
    const escapeHtml = (str: string) => str.replace(/"/g, '&quot;').replace(/'/g, '&#39;');
    let glightboxDesc = "";
    if (finalCaption) glightboxDesc += `title: ${escapeHtml(finalCaption)}`;
    if (source) {
      if (glightboxDesc) glightboxDesc += "; ";
      glightboxDesc += `description: ${escapeHtml(source)}`;
    }

    const interactiveProps = noAnchor
      ? { tabindex: -1 as const }
      : {
          href: metadata.src,
          "data-gallery": galleryId,
          "data-glightbox": glightboxDesc || undefined,
          "data-source-url": sourceurl || undefined,
        } as const;

    return (
      <Tag
        class={baseClass}
        data-seo-caption={finalSeoCaption}
        {...interactiveProps}
      >
        <Image
          src={metadata}
          alt={finalSeoCaption}
          class="gallery-image"
          style={{
            width: "100%",
            aspectRatio: resolvedAspect,
            objectFit: "cover",
            objectPosition: position || "center",
            transition: "transform 0.3s ease",
          }}
          quality={quality}
          widths={widths}
          sizes={sizes}
          loading={index === 0 ? "eager" : "lazy"}
          fetchpriority={(index === 0 ? "high" : undefined) as "high" | undefined}
        />
        {noAnchor && finalCaption && (
          <span class="gallery-caption" data-gallery-caption>
            {finalCaption}
          </span>
        )}
      </Tag>
    );
  })}
</div>

<style>
  .gallery-caption[data-gallery-caption] {
    display: block;
    margin-top: 0.5rem;
    font-size: 0.9rem;
    color: var(--color-text-muted);
  }
</style>
