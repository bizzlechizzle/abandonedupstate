---
// GLightbox component for image galleries
---

<script>
  import GLightbox from 'glightbox';
  import 'glightbox/dist/css/glightbox.min.css';

  const escapeHtml = (str: string) =>
    str
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');

  const buildSourceDescription = (link: HTMLAnchorElement) => {
    const isHistorical = link.dataset.historical === 'true';
    const source = link.dataset.source?.trim();

    if (!isHistorical || !source) {
      return '';
    }

    const sourceUrl = link.dataset.sourceUrl?.trim();
    return sourceUrl ? `Source: ${source} (${sourceUrl})` : `Source: ${source}`;
  };

  function syncLightboxCaptions(root = document) {
    const links = Array.from(
      root.querySelectorAll<HTMLAnchorElement>('a.glightbox')
    );

    links.forEach(link => {
      const img = link.querySelector('img');
      const seoCaption = link.dataset.seoCaption?.trim();
      const visibleCaption = link.querySelector('[data-gallery-caption]');

      // If data-glightbox already exists (from GalleryLightbox component), skip
      if (!link.dataset.glightbox) {
        // Handle old data-caption format (hero images, etc)
        const caption = link.dataset.caption?.trim();
        if (caption) {
          const escapeHtml = (str: string) => str.replace(/"/g, '&quot;').replace(/'/g, '&#39;');
          link.dataset.glightbox = `title: ${escapeHtml(caption)}`;
        }
      }

      // Sync visible gallery caption if needed
      if (visibleCaption) {
        const glightboxAttr = link.dataset.glightbox;
        if (glightboxAttr) {
          const titleMatch = glightboxAttr.match(/title:\s*([^;]+)/);
          if (titleMatch && titleMatch[1] && visibleCaption.textContent !== titleMatch[1]) {
            visibleCaption.textContent = titleMatch[1].trim();
          }
        }
      }

      // Ensure historical image sources are reflected in GLightbox metadata
      const sourceDescription = buildSourceDescription(link);
      if (sourceDescription) {
        const glightboxAttr = link.dataset.glightbox || '';
        const sanitizedDescription = escapeHtml(sourceDescription);

        if (/description:\s*/.test(glightboxAttr)) {
          link.dataset.glightbox = glightboxAttr.replace(
            /description:\s*([^;]*)(;|$)/,
            `description: ${sanitizedDescription}$2`
          );
        } else if (glightboxAttr) {
          link.dataset.glightbox = `${glightboxAttr}; description: ${sanitizedDescription}`;
        } else {
          link.dataset.glightbox = `description: ${sanitizedDescription}`;
        }

        // Provide fallback for GLightbox's native data-description parsing
        link.dataset.description = sourceDescription;
      }

      // Set SEO alt text on images
      if (img && seoCaption) {
        img.alt = seoCaption;
      }
    });
  }

  function initGLightbox() {
    syncLightboxCaptions();

    // Initialize GLightbox
    const lightbox = GLightbox({
      touchNavigation: true,
      loop: true,
      autoplayVideos: true,
      descPosition: 'bottom',
      plyr: {
        css: 'https://cdn.plyr.io/3.6.8/plyr.css',
        js: 'https://cdn.plyr.io/3.6.8/plyr.js',
        config: {
          ratio: '16:9',
          youtube: {
            noCookie: true,
            rel: 0,
            showinfo: 0,
            iv_load_policy: 3
          },
          vimeo: {
            byline: false,
            portrait: false,
            title: false,
            transparent: false
          }
        }
      }
    });

    // Re-initialize when navigating (for Astro transitions)
    document.addEventListener('astro:page-load', () => {
      syncLightboxCaptions();
      lightbox.reload();
    });
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initGLightbox);

  // Re-initialize after page transitions
  document.addEventListener('astro:page-load', initGLightbox);
</script>

<style is:global>
  /* Caption styling */
  .glightbox-clean .gslide-title {
    margin-bottom: 4px !important;
  }

  /* Source text styling - non-clickable */
  .glightbox-clean .gslide-desc {
    color: rgba(255, 255, 255, 0.7) !important;
    font-size: 0.85em !important;
    pointer-events: none !important;
    cursor: default !important;
  }

  .glightbox-clean .gslide-desc a {
    pointer-events: none !important;
    cursor: default !important;
    text-decoration: none !important;
    color: inherit !important;
  }

  /* Navigation buttons */
  .glightbox-clean .gprev,
  .glightbox-clean .gnext {
    background: rgba(0, 0, 0, 0.6);
    border-radius: 50%;
  }

  .glightbox-clean .gprev:hover,
  .glightbox-clean .gnext:hover {
    background: rgba(0, 0, 0, 0.8);
  }
</style>
